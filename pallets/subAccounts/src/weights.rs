
//! Autogenerated weights for `pallet_subaccount`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-19, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Patchs-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-unitchain
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_subaccount
// --extrinsic
// *
// --steps
// 50
// --repeat
// 10
// --output
// pallets/subAccounts/src/weights.rs
// --template
// frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_subaccount`.
pub trait WeightInfo {
	fn add_sub_account() -> Weight;
	fn remove_sub_account() -> Weight;
	fn update_sub_account_role() -> Weight;
}

/// Weights for `pallet_subaccount` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `SubAccount::SubAccount` (r:2 w:1)
	/// Proof: `SubAccount::SubAccount` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Profile::UserItem` (r:1 w:1)
	/// Proof: `Profile::UserItem` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Profile::AllUsers` (r:1 w:1)
	/// Proof: `Profile::AllUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_sub_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1506`
		//  Estimated: `6100`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 6100)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `SubAccount::SubAccount` (r:2 w:1)
	/// Proof: `SubAccount::SubAccount` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Profile::UserItem` (r:1 w:1)
	/// Proof: `Profile::UserItem` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Profile::AllUsers` (r:1 w:1)
	/// Proof: `Profile::AllUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_sub_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1656`
		//  Estimated: `6100`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(52_000_000, 6100)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	
	fn update_sub_account_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1656`
		//  Estimated: `6100`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(42_000_000, 6100)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `SubAccount::SubAccount` (r:2 w:1)
	/// Proof: `SubAccount::SubAccount` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Profile::UserItem` (r:1 w:1)
	/// Proof: `Profile::UserItem` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Profile::AllUsers` (r:1 w:1)
	/// Proof: `Profile::AllUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_sub_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1506`
		//  Estimated: `6100`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 6100)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `SubAccount::SubAccount` (r:2 w:1)
	/// Proof: `SubAccount::SubAccount` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Profile::UserItem` (r:1 w:1)
	/// Proof: `Profile::UserItem` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Profile::AllUsers` (r:1 w:1)
	/// Proof: `Profile::AllUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_sub_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1656`
		//  Estimated: `6100`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(52_000_000, 6100)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}

	fn update_sub_account_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1656`
		//  Estimated: `6100`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(42_000_000, 6100)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
